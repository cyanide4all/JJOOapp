<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
    List<string> savedOutputs = new List<string>();
    Engine engine = new Engine();

    public void DeleteOldOutputs()
    {
        EnvDTE.ProjectItem templateProjectItem = TemplateProjectItem();
        foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
        {
            if (!savedOutputs.Contains(childProjectItem.Name))
                childProjectItem.Delete();
        }
    }

    public void MoveToNestedItem (string parenFileName, string childFilePath)
    {
        EnvDTE.ProjectItem projectItem = FindProjectItemInRoot (parenFileName);
        projectItem.ProjectItems.AddFromFile(childFilePath);
    }

    public void SaveOnNestedItem(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString(), Encoding.UTF8);

        // Se guardan los elementos que se han intentado genrerar para que 
        // en una posible limpieza posterior del proyecto elimine los contenidos
        // generados previamente y que por algún motivo no han sido generados.
        EnvDTE.ProjectItem projectItem = 
            FindProjectItemInRoot(outputFileName.Replace(".Generated",""));
           
        projectItem.ProjectItems.AddFromFile(outputFilePath);
        savedOutputs.Add(outputFileName);

        // Cada vez que se intenta escribir se elimina todo le contenido.
        this.GenerationEnvironment = new StringBuilder();
    }

    public void SaveOutput(string outputFileName, bool overwrite)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        // No en todos los casos interesa sobreescribir el fichero.
        if (overwrite || !File.Exists(outputFilePath))
        {
            File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString(), Encoding.UTF8);
        }

        // Se guardan los elementos que se han intentado genrerar para que 
        // en una posible limpieza posterior del proyecto elimine los contenidos
        // generados previamente y que por algún motivo no han sido generados.
        EnvDTE.ProjectItem templateProjectItem = TemplateProjectItem();
        templateProjectItem.ProjectItems.ContainingProject.ProjectItems.AddFromFile(outputFilePath);
        savedOutputs.Add(outputFileName);

        // Cada vez que se intenta escribir se elimina todo le contenido.
        this.GenerationEnvironment = new StringBuilder();
    }

    public EnvDTE.ProjectItem TemplateProjectItem()
    {
        EnvDTE.Project dteProject = TemplateProject();

        IVsProject vsProject = dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");

        return templateItem;
    }

    public EnvDTE.Project TemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    private static IVsProject dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }


    private string GetDefaultNameSpace()
    {
        var provider = (IServiceProvider)Host;
        var dte = (EnvDTE.DTE)provider.GetService(typeof(EnvDTE.DTE));
        var solutionProjects = (Array)dte.ActiveSolutionProjects;
        var project = (EnvDTE.Project)solutionProjects.GetValue(0);
        var defaultNamespace = project.Properties.Item("DefaultNamespace").Value;
        var templateDir = Path.GetDirectoryName(Host.TemplateFile);
        var fullPath = project.Properties.Item("FullPath").Value.ToString();
        fullPath =  fullPath.EndsWith("\\") 
            ? fullPath.Substring(0, fullPath.Length-1) : fullPath;
        var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
        return string.Concat(defaultNamespace, subNamespace);
    }

public EnvDTE.ProjectItem FindProjectItemInRoot(string name)
{
    EnvDTE.Project project = TemplateProject();

    foreach (EnvDTE.ProjectItem item in project.ProjectItems)
    {
        if (item.Name == name)
        {
            return item;
        }
    }

    throw new Exception("No encontrado.");
}
#>